Some of The Most Important SQL Commands
SELECT - extracts data from a database
UPDATE - updates data in a database
DELETE - deletes data from a database
INSERT INTO - inserts new data into a database
CREATE DATABASE - creates a new database
ALTER DATABASE - modifies a database
CREATE TABLE - creates a new table
ALTER TABLE - modifies a table
DROP TABLE - deletes a table
CREATE INDEX - creates an index (search key)
DROP INDEX - deletes an index	


>>>> selects only distinct values from table
SELECT DISTINCT column1, column2, ...
FROM table_name;



Operator	Description	
=			Equal	
>			Greater than	
<			Less than	
>=			Greater than or equal	
<=			Less than or equal	
-----------------------------
<>			Not equal. Note: In some versions of SQL this operator may be written as !=	

SELECT * FROM Products
WHERE Price <> 18;
-----------------------------
AND

SELECT * FROM Customers
WHERE Country='Germany' AND City='Berlin';
-----------------------------
OR

SELECT * FROM Customers
WHERE City='Berlin' OR City='MÃ¼nchen';
-----------------------------
NOT

SELECT * FROM Customers
WHERE NOT Country='Germany';
-----------------------------
ORDER BY
1. Ascending order
SELECT * FROM Customers
ORDER BY Country; 
2. Desc order
SELECT * FROM Customers
ORDER BY Country DESC;
3. Combine AO and DO
SELECT * FROM Customers ORDER BY Country DESC, CustomerName;

-------------------------------
INSERT INTO

INSERT INTO Customers (CustomerName, ContactName, Address, City, PostalCode, Country)
VALUES ('Cardinal', 'Tom B. Erichsen', 'Skagen 21', 'Stavanger', '4006', 'Norway');
--------------------------------
NULL

SELECT CustomerName, ContactName, Address
FROM Customers
WHERE Address IS NOT NULL;
-------------------------------------------
UPDATE

UPDATE Customers
SET ContactName = 'Alfred Schmidt', City= 'Frankfurt'
WHERE CustomerID = 1;
------------------------------------------------
DELETE

DELETE FROM Customers WHERE CustomerName='Alfreds Futterkiste';

DELETE FROM Customers;
------------------------------------------------
SELECT TOP

The following SQL statement selects the first three records from the "Customers" table (for SQL Server/MS Access):

SELECT TOP 3 * FROM Customers;

The following SQL statement shows the equivalent example using the LIMIT clause (for MySQL):

SELECT * FROM Customers
LIMIT 3;

The following SQL statement selects the first 50% of the records from the "Customers" table (for SQL Server/MS Access):

SELECT TOP 50 PERCENT * FROM Customers;
-----------------------------------------
MIN()/MAX()

The MIN() function returns the smallest value of the selected column.
The MAX() function returns the largest value of the selected column.

SELECT MIN(Price) AS SmallestPrice   --> Price is the column name
FROM Products;
----------------------------------------
COUNT()/SUM()/AVG()

SELECT COUNT(ProductID)
FROM Products;

SELECT AVG(Price)
FROM Products;

SELECT SUM(Quantity)
FROM OrderDetails;
-----------------------------------------
LIKE/NOT LIKE
The LIKE operator is used in a WHERE clause to search for a specified pattern in a column.

There are two wildcards often used in conjunction with the LIKE operator:

% - The percent sign represents zero, one, or multiple characters
_ - The underscore represents a single character

LIKE Operator					Description
WHERE CustomerName LIKE 'a%'	Finds any values that start with "a"
WHERE CustomerName LIKE '%a'	Finds any values that end with "a"
WHERE CustomerName LIKE '%or%'	Finds any values that have "or" in any position
WHERE CustomerName LIKE '_r%'	Finds any values that have "r" in the second position
WHERE CustomerName LIKE 'a_%'	Finds any values that start with "a" and are at least 2 characters in length
WHERE CustomerName LIKE 'a__%'	Finds any values that start with "a" and are at least 3 characters in length
WHERE ContactName LIKE 'a%o'	Finds any values that start with "a" and ends with "o"
---------------------------------------------
SQL Wildcards

Wildcard Characters in SQL Server
Symbol	Description											Example
%		Represents zero or more characters					bl% finds bl, black, blue, and blob
_		Represents a single character						h_t finds hot, hat, and hit
[]		Represents any single character within the brackets	h[oa]t finds hot and hat, but not hit
^		Represents any character not in the brackets		h[^oa]t finds hit, but not hot and hat
-		Represents a range of characters					c[a-b]t finds cat and cbt
----------------------------------------------
IN/NOT IN

SELECT * FROM Customers
WHERE Country IN ('Germany', 'France', 'UK');


The following SQL statement selects all customers that are from the same countries as the suppliers:

SELECT * FROM Customers
WHERE Country IN (SELECT Country FROM Suppliers);
----------------------------
BETWEEN/NOT BETWEEN

SELECT * FROM Products
WHERE Price BETWEEN 10 AND 20; --> here 10 and 20 are included
------------------------------------------
SQL Aliases

An alias only exists for the duration of the query.

ALIAS for column examples:
SELECT CustomerID AS ID, CustomerName AS Customer
FROM Customers;


The following SQL statement creates two aliases, one for the CustomerName column and one for the ContactName column. 
Note: It requires double quotation marks or square brackets if the alias name contains spaces:

SELECT CustomerName AS Customer, ContactName AS [Contact Person]
FROM Customers;

The following SQL statement creates an alias named "Address" that combine four columns (Address, PostalCode, City and Country):

Example
SELECT CustomerName, Address + ', ' + PostalCode + ' ' + City + ', ' + Country AS Address
FROM Customers;

ALIAS for TABLE examples

SELECT o.OrderID, o.OrderDate, c.CustomerName
FROM Customers AS c, Orders AS o
WHERE c.CustomerName='Around the Horn' AND c.CustomerID=o.CustomerID;

----------------------------------------------------------
(INNER) JOIN: Returns records that have matching values in both tables
LEFT (OUTER) JOIN: Returns all records from the left table, and the matched records from the right table
RIGHT (OUTER) JOIN: Returns all records from the right table, and the matched records from the left table
FULL (OUTER) JOIN: Returns all records when there is a match in either left or right table


INNER JOIN:
2 tables:
SELECT column_name(s)
FROM table1
INNER JOIN table2
ON table1.column_name = table2.column_name;

3 tables
SELECT Orders.OrderID, Customers.CustomerName, Shippers.ShipperName
FROM ((Orders
INNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID)
INNER JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID);
-------------------------------------------------------------
UNION:
The UNION operator is used to combine the result-set of two or more SELECT statements.

> Each SELECT statement within UNION must have the same number of columns
> The columns must also have similar data types
> The columns in each SELECT statement must also be in the same order

SELECT column_name(s) FROM table1
UNION
SELECT column_name(s) FROM table2;
---------------------------------------------
GROUP BY:
SELECT column_name(s)
FROM table_name
WHERE condition
GROUP BY column_name(s)
ORDER BY column_name(s);
-----------------------------------------------
HAVING

The HAVING clause was added to SQL because the WHERE keyword could not be used with aggregate functions.

SELECT column_name(s)
FROM table_name
WHERE condition
GROUP BY column_name(s)
HAVING condition
ORDER BY column_name(s);
----------------------------------------------
EXISTS:
SELECT column_name(s)
FROM table_name
WHERE EXISTS
(SELECT column_name FROM table_name WHERE condition);
------------------------------------------------
ANY/ALL:
SELECT ProductName
FROM Products
WHERE ProductID = ANY (SELECT ProductID FROM OrderDetails WHERE Quantity = 10);

SELECT ProductName
FROM Products
WHERE ProductID = ALL (SELECT ProductID FROM OrderDetails WHERE Quantity = 10);
---------------------------------------------------
SELECT INTO:
The SELECT INTO statement copies data from one table into a new table.

SELECT * INTO CustomersGermany
FROM Customers
WHERE Country = 'Germany';
----------------------------------------------------
INSERT INTO SELECT
The INSERT INTO SELECT statement copies data from one table and inserts it into another table.

INSERT INTO table2 (column1, column2, column3, ...)
SELECT column1, column2, column3, ... FROM table1
WHERE condition;
------------------------------------------------------
CASE:

SELECT OrderID, Quantity,
CASE
    WHEN Quantity > 30 THEN 'The quantity is greater than 30'
    WHEN Quantity = 30 THEN 'The quantity is 30'
    ELSE 'The quantity is under 30'
END 
AS QuantityText
FROM OrderDetails;
-------------------------------------------------
DATABASE LEVEL:
> CREATE DATABASE databasename;

> DROP DATABASE databasename;

> BACKUP DATABASE databasename
  TO DISK = 'filepath';

> BACKUP DATABASE databasename
  TO DISK = 'filepath'
  WITH DIFFERENTIAL;

### A differential back up only backs up the parts of the database that have changed since the last full database backup.

> CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    column3 datatype,
   ....
);

> CREATE TABLE new_table_name AS
    SELECT column1, column2,...
    FROM existing_table_name
    WHERE ....;
	
> DROP TABLE table_name;      ## The DROP TABLE statement is used to drop an existing table in a database.

> TRUNCATE TABLE table_name;  ## The TRUNCATE TABLE statement is used to delete the data inside a table, but not the table itself.

### The ALTER TABLE statement is used to add, delete, or modify columns in an existing table.

> ALTER TABLE table_name
ADD column_name datatype;

> ALTER TABLE table_name
DROP COLUMN column_name;

> ALTER TABLE table_name
MODIFY COLUMN column_name datatype;
---------------------------------------------------
SQL CONSTRAINTS:

CREATE TABLE table_name (
    column1 datatype constraint,
    column2 datatype constraint,
    column3 datatype constraint,
    ....
);

NOT NULL - Ensures that a column cannot have a NULL value
UNIQUE - Ensures that all values in a column are different
PRIMARY KEY - A combination of a NOT NULL and UNIQUE. Uniquely identifies each row in a table
FOREIGN KEY - Uniquely identifies a row/record in another table
CHECK - Ensures that all values in a column satisfies a specific condition
DEFAULT - Sets a default value for a column when no value is specified
INDEX - Used to create and retrieve data from the database very quickly

NOT NULL:
CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255) NOT NULL,
    Age int
);
-----------------------------------------
UNIQUE:
CREATE TABLE Persons (
    ID int NOT NULL UNIQUE,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int
);
----------------------------------
PRIMARY KEY:
CREATE TABLE Persons (
    ID int NOT NULL PRIMARY KEY,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int
);
------------------------------------
